<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Control</title>

    <script type="text/javascript">
        var loadError=false;
        var appBase = %10                                                                                                                    ;
    </script>
    <link onerror="loadError=true" rel="stylesheet" href="/lib/bstrap/css/bstrap.css" />
    <link onerror="loadError=true" rel="stylesheet" href="/css/site.css" />
    <link rel="icon" href="/images/ir.ico" type="image/x-icon" />
    <link rel="apple-touch-icon" href="/images/ir.ico" type="image/x-icon" />
</head>
<body onload="checkLoadError()">
    <nav class="navbar navbar-inverse navbar-fixed-top">
        <div class="container">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
            </div>
            <div class="navbar-collapse collapse">
                <ul class="nav navbar-nav">
                    <li><a href="/Index"><span class="glyphicon glyphicon-dashboard"></span> Control</a></li>
                    <li><a href="/Settings"><span class="glyphicon glyphicon-wrench"></span> Settings</a></li>
                    <li><a href="/History"><span class="glyphicon  glyphicon-time"></span> History</a></li>
                </ul>
            </div>
        </div>
    </nav>

    <script onerror="loadError=true" src="/lib/jquery/jqcombo.js"></script>

    <div class="container body-content">
        <h2><span class="glyphicon glyphicon-dashboard"></span> Control</h2>
        <div id="auto-recovery-warning" class="row col-lg-12 alert alert-warning" style="display:%0    >
            <span class="glyphicon glyphicon-alert" style="margin-right:10px"></span> Auto-recovery is disabled!
        </div>
        <div class="row col-lg-12">
            <div class="toggleSwitch">
                <input type="checkbox" id="router" %1       />
                <div class="roundToggleSwitch"><span class="toggleSwitchText On">ON</span><span class="toggleSwitchText Off">OFF</span></div>
                <label class="toggleSwitch" for="router" name="skills"><span class="toggleSwitchLabel">Router</span></label>
            </div>
        </div>
        <div class="row col-lg-12">
            <div class="toggleSwitch">
                <input type="checkbox" id="modem" %2      />
                <div class="roundToggleSwitch"><span class="toggleSwitchText On">ON</span><span class="toggleSwitchText Off">OFF</span></div>
                <label class="toggleSwitch" for="modem" name="skills"><span class="toggleSwitchLabel">Modem</span></label>
            </div>
        </div>
        <div class="row col-lg-12 alert" id="connection"></div>
        <br />
        <div class="row col-lg-12">
            <input class="btn btn-info" type="button" id="checkConnectionBtn" value="Check Connection" />
        </div>
        <div id="glassPane" style='visibility:%3       class="glassPane"></div>
    <!-- <br /><br /><br /><br />
	<span id="spnMessage"></span> -->

        <script type="text/javascript">
            function checkLoadError() {
                if (loadError)
                    location.replace(document.location.pathname);
            }

    const recoveryTypes = {
        NONE: 0,
        ROUTER: 1,
        MODEM: 2,
        TEST_CONNECTION: 3,
        FAILED: 4,
        HW_FAILURE: 5,
        DISCONNECTED: 6
    };

    const powerStates = {
        OFF: 0,
        ON: 1
    }

    var recoveryTimer = 0;

    SetLastRecoveryDisplay(%4     , %5  , %6  , %7  , %8     );

    var recoveryType = %9   ;

    SetConnectionStatus(recoveryType);

    var id = GetId();

    var autoPilot = false;

    var inactive = true;

    function GetId() {
        var href = window.location.href;
        return href.substr(href.lastIndexOf("/") + 1);
    }

    function StartRecoveryCycle(type) {
        $("#glassPane").css("visibility", "visible");
        fetch(appBase + "api/recovery", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({ recoveryType: type  })
        });
    }

    $(document).ready(function () {
        $("#router").click(function () {
            StartRecoveryCycle(recoveryTypes.ROUTER);
        })
        $("#modem").click(function () {
            StartRecoveryCycle(recoveryTypes.MODEM);
        })
        $("#checkConnectionBtn").click(function () {
            StartRecoveryCycle(recoveryTypes.TEST_CONNECTION);
        })
    });

    var source = new EventSource(appBase + 'api/sse/' + id);

    source.onopen = function (event) {
        //$("#spnMessage")[0].innerHTML += "Opened";
    }

    source.onerror = function (event) {
        //$("#spnMessage")[0].innerHTML += " Closed";
        //if (inactive) {
        //    window.location.href = appBase;
        //}
    }

    source.onmessage = function (event) {
        inactive = false;
        var state = JSON.parse(event.data);
        SetConnectionStatus(state.recoveryType);
        //$("#spnMessage").text("id=" + id + " " + event.data);
        switch (state.recoveryType) {
            case recoveryTypes.ROUTER:
                if (recoveryType != recoveryTypes.ROUTER) {
                    RecoveryAutoPilot();
                }
            case recoveryTypes.MODEM:
            case recoveryTypes.TEST_CONNECTION:
            case recoveryTypes.HW_FAILURE:
                $("#glassPane").css("visibility", "visible");
                break;
            case recoveryTypes.NONE:
            case recoveryTypes.FAILED:
            case recoveryTypes.DISCONNECTED:
                $("#glassPane").css("visibility", "hidden");
                break;
        }
        if (recoveryType == recoveryTypes.NONE && state.recoveryType == recoveryTypes.MODEM)
            state.modemState = powerStates.OFF;
        $("#modem")[0].checked = state.modemState == powerStates.ON;
        if (!autoPilot)
            $("#router")[0].checked = state.routerState == powerStates.ON;
        $("#auto-recovery-warning").css('display', state.autoRecovery ? 'none' : 'block');
        if (state.showLastRecovery) {
            SetLastRecoveryDisplay(state.days, state.hours, state.minutes, state.seconds, true);
        } else {
            HideLastRecovery();
        }
        recoveryType = state.recoveryType;
    }

    function HideLastRecovery() {
        StopRecoveryTimer();
    }

    function StopRecoveryTimer() {
        if (recoveryTimer != 0) {
            clearInterval(recoveryTimer);
        }
    }

    function ConnectionString(recoveryType) {
        switch (recoveryType) {
            case recoveryTypes.NONE:
                return "Connected.";
                break;
            case recoveryTypes.ROUTER:
                return "Disconnected - Waiting for router recovery.";
                break;
            case recoveryTypes.MODEM:
                return "Disconnected - Waiting for modem recovery.";
                break;
            case recoveryTypes.TEST_CONNECTION:
                return "Checking connectivity.";
                break;
            case recoveryTypes.FAILED:
                return "Disconnected - Recovery failed!";
            case recoveryTypes.HW_FAILURE:
                return "Hardware Failure!"
            case recoveryTypes.DISCONNECTED:
                return "Disconnected.";
        }
    }

    function SetConnectionClass(recoveryType) {
        switch (recoveryType) {
            case recoveryTypes.NONE:
                $("#connection").removeClass("alert-danger");
                $("#connection").removeClass("alert-warning");
                $("#connection").addClass("alert-success");
                break;
            case recoveryTypes.ROUTER:
            case recoveryTypes.MODEM:
            case recoveryTypes.FAILED:
            case recoveryTypes.HW_FAILURE:
            case recoveryTypes.DISCONNECTED:
                $("#connection").removeClass("alert-success");
                $("#connection").removeClass("alert-warning");
                $("#connection").addClass("alert-danger");
                break;
            case recoveryTypes.TEST_CONNECTION:
                $("#connection").removeClass("alert-success");
                $("#connection").removeClass("alert-danger");
                $("#connection").addClass("alert-warning");
                break;
        }
    }

    function BuildConnectionStatus(recoveryType, message) {
        var statusGlyphicon;
        switch(recoveryType) {
            case recoveryTypes.NONE:
                statusGlyphicon = 'glyphicon-ok';
                break;
            case recoveryTypes.ROUTER:
            case recoveryTypes.MODEM:
            case recoveryTypes.FAILED:
            case recoveryTypes.HW_FAILURE:
            case recoveryTypes.DISCONNECTED:
                statusGlyphicon = 'glyphicon-remove';
                break;
            case recoveryTypes.TEST_CONNECTION:
                statusGlyphicon = 'glyphicon-refresh';
                break;
        }

        return "<span class='glyphicon " + statusGlyphicon + "'></span> " + message;
    }

    function SetConnectionStatus(recoveryType) {
        $("#connection")[0].innerHTML = BuildConnectionStatus(recoveryType, ConnectionString(recoveryType));
        SetConnectionClass(recoveryType);
    }

    function RecoveryAutoPilot() {
        autoPilot = true;
        $("#router")[0].checked = false;
        HideLastRecovery();
        SetConnectionStatus(recoveryTypes.ROUTER);
        setTimeout(async function () {
            $("#router")[0].checked = true;
            await WaitForServerToBeAccessible(180000);
            location.href = appBase + "index";
            autoPilot = false;
        }, 4500)
    }

    function PadZeroes(num, size) {
        return num.toString().padStart(size, '0');
    }

    function SetLastRecoveryStatus(d, h, m, s) {
        $('#connection')[0].innerHTML = BuildConnectionStatus(recoveryTypes.NONE, ConnectionString(recoveryTypes.NONE) + " Time since last recovery: " + d + "." + PadZeroes(h, 2) + ":" + PadZeroes(m, 2) + ":" + PadZeroes(s, 2));
    }

    function SetLastRecoveryDisplay(d, h, m, s, show) {
	if (!show)
            return;
        var days = d;
        var hours = h;
        var minutes = m;
        var seconds = s;
        StopRecoveryTimer();
        SetLastRecoveryStatus(days, hours, minutes, seconds);
        recoveryTimer = setInterval(function () {
            if (++seconds == 60) {
                seconds = 0;
                if (++minutes == 60) {
                    minutes = 0;
                    if (++hours == 24) {
                        hours = 0;
                        days += 1;
                    }
                }
            }
            SetLastRecoveryStatus(days, hours, minutes, seconds);
        }, 1000);
    }

    async function WaitForServerToBeAccessible(timeOut) {
        var promise = new Promise((resolve, reject) => {
            var successCount = 0;
            var startTime = Date.now();
            var timerId = setInterval(async function () {
                var acc = await IsWebServerAccessible();
                if (acc) {
                    if (++successCount == 2) {
                        clearInterval(timerId);
                        resolve(true);
                    }
                } else {
                    successCount = 0;
                    if (Date.now() - startTime > timeOut) {
                        clearInterval(timerId);
                        resolve(false);
                    }
                }
            }, 1000);
        });

        return await promise;
    }

    async function IsWebServerAccessible() {
        promise = new Promise((resolve, reject) => {
            var req = new XMLHttpRequest();

            req.timeout = 5000; // it could happen that the request takes a very long time

            req.onreadystatechange = function () {
                if (req.readyState == 4) {
                    resolve(200 <= req.status && req.status < 300);
                }
            }

            req.ontimeout = function () {
                resolve(false);
            }

            req.open("GET", appBase + "dummy", true);
            req.setRequestHeader("Cache-Control", "no-cache")
            req.send();
        });

        return await promise;
    }
        </script>

    </div>

    <script onerror="loadError=true" src="/lib/bstrap/js/bstrap.js"></script>
</body>
</html>
